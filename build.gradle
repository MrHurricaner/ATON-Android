// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: "dependencies.gradle"  //这个和下面一行是一样的

//apply from: this.file('commom.gradle')//表示在根工程中引入新建的common.gradle文件，这样在其他的子工程中就可以用common.gradle中定义的属性

buildscript {

    repositories {
        google()
        jcenter()
        maven { url 'https://dl.bintray.com/umsdk/release' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.2'
        classpath 'io.realm:realm-gradle-plugin:5.8.0'
        // 配置自动上传符号表插件，注：为了能快速并准确地定位用户APP发生Crash的代码位置，Bugly使用符号表对APP发生Crash的程序堆栈进行解析和还原
        classpath 'com.tencent.bugly:symtabfileuploader:latest.release'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven{url "http://192.168.9.39:8081/repository/maven-releases/"}
//        maven { url "https://sdk.platon.network/nexus/content/groups/public/" }
        maven { url 'https://dl.bintray.com/umsdk/release' }
        maven { url 'https://jitpack.io' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * project 相关的api讲解
 */

//this.getRootsProject()

//def getProjects(){
//    println('-------------')
//    println('Sub Project')
//    println('---------------')
//    this.getSubprojects().eachWithIndex { Project project, int index ->
////        if(index ==0){
////            println "Root Project : '${project.name}'"
////        }else {
//            println"+-----project ':${project.name}'"
////        }
//
//    }
//}

//获取当前project的父project
//def  getPrarentProject(){
//    def  name = this.getParent().name
//    println"the parent project name is : ${name}"
//
//}

//def  getRootsProject(){
//    def name =this.getRootProject().name
//    println "the root project name is : ${name}"
//
//}

//操作wallet这个project
//project('wallet') { Project project ->
////这里就可以操作wallet这个project的一些方法和属性(可以把wallet.gradle里面所有的配置信息都放到这里来，那么它里面的东西就可以删掉啦)
//    apply plugin: 'com.android.application'
//
//    dependencies {
//
//    }
//
//    android {
//
//    }
//}



//project('biometric'){
//    apply plugin: 'com.android.library'
//
//}

//配置当前节点工程和其subproject的所有project，这里一般配置所有工程里面通用的东西，这样就不用每个project都配置一遍
//allprojects {
//    group 'com.aton'
////    version '1.0.0-release'
//
//}


//println project('zxing').group



//不包括当前节点工程，只包括它的subproject
//subprojects {
//    //表示把当前的库工程程上传到配置的maven中
//    if(project.plugins.hasPlugin('com.android.library')){
//
//        apply from: '../xxxxxxMaven.gradle'
//    }
//
//}



//subprojects {
//    //定义扩展属性
//    ext {
//        compileSdkVersion =25
//        libAndroidDesign ='com.alibaba:arouter-api:1.4.1'
//    }
//}

//定义扩展属性(这种定义方式表示在根工程定义扩展属性，
// 那么其他子工程调用的话就直接使用 --》this.rootProject.compileSdkVersion等这种方式，
// 或者使用this.compileSdkVersion这种方式，因为gradle规定，根project（父类project）中的属性会被子project继承，所以可以在
// 子project调用根project中的属性)

//ext {
//    compileSdkVersion =25
//    libAndroidDesign ='com.alibaba:arouter-api:1.4.1'
//}


//println "the root file path is:" +getRootDir().absolutePath
//println "the build file path is" + getBuildDir().absolutePath
//println "the project file path is" + getProjectDir().absolutePath

//println getContent('dependencies.gradle')
//
//def  getContent(String path){
//    try {
//       def file = file(path)//相对于当前的project工程查找
//        //files() 是定位多个文件
//        return  file.text
//    }catch (GradleException e){
//           println 'file not found ...'
//    }
//
//    return  null
//}



//builscript {//注意：这个闭包里面的dependencies引入的是gradle使用到的一些插件，而我们的wallet.gradle中的dependencies是我们app使用到的第三方库，两者是不一样的
//    ScriptHandler scriptHandler ->
//    //配置我们工程的仓库地址
//    scriptHandler.repositories {RepositoryHandler repositoryHandler ->
//        repositoryHandler.jcenter()
//        repositoryHandler.mavenCentral()
//        repositoryHandler.mavenLocal()
//        repositoryHandler.ivy{}
//
//        //maven仓库地址可以配置多个
//        repositoryHandler.maven{ //用户名和密码正确就可以获取到这个仓库下面的jar和其他的一些库
//            name  'personal'
//            url 'http://localhost:8081:/nexus/repositories'
//            credentials{
//                username = 'admin'
//                password = '123456'
//            }
//        }
//    }
//
//    //配置我们工程的"插件" 依赖地址(记住：我们的gradle是一个编程框架，所以肯定在编码的过程中会用到一些第三方的插件，所以就在这里引入)
//    scriptHandler.dependencies {
//       classpath 'com.android.tools.build:gradle:3.2.1'
////       classpath 'com.tencent.tinker-patch-gradle-plugin:1.7.7'
//
//
//    }
//}

//下面这个配置是对参数和闭包非常熟念的情况下，简写的方式
//builscript {
//    //配置我们工程的仓库地址
//    repositories {
//        jcenter()
//        mavenCentral()
//        mavenLocal()
//        ivy{}
//
//        //maven仓库地址可以配置多个
//        maven{ //用户名和密码正确就可以获取到这个仓库下面的jar和其他的一些库
//            name  'personal'
//            url 'http://localhost:8081:/nexus/repositories'
//            credentials{
//                username = 'admin'
//                password = '123456'
//            }
//        }
//    }
//
//    //配置我们工程的"插件" 依赖地址
//    scriptHandler.dependencies {}
//
//}