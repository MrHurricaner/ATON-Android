apply plugin: 'com.android.application'
apply plugin: 'realm-android'
apply plugin: 'org.sonarqube'

android {

    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {

        applicationId "com.juzix.wallet"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionName "${version_name}"
        versionCode Integer.parseInt(version_code)
        buildConfigField("String", "RELEASE_TYPE", "${releaseTypeC}")
        buildConfigField("String", "UM_APPKEY", "${UM_APPKEY}")
        buildConfigField("String", "URL_SERVICE_AGREEMENT", "${URL_SERVICE_AGREEMENT}")
        buildConfigField("String", "URL_SUPPORT_FEEDBACK", "${URL_SUPPORT_FEEDBACK}")
        buildConfigField("String", "URL_PLATON_NETWORK", "${URL_PLATON_NETWORK}")
        buildConfigField("String", "URL_MAIN_SERVER", "${URL_MAIN_SERVER}")
        buildConfigField("String", "URL_TEST_SERVER", "${URL_TEST_SERVER}")
        buildConfigField("String", "URL_DEVELOP_SERVER", "${URL_DEVELOP_SERVER}")
        buildConfigField("String", "ID_MAIN_CHAIN", "${ID_MAIN_CHAIN}")
        buildConfigField("String", "ID_TEST_CHAIN", "${ID_TEST_CHAIN}")
        buildConfigField("String", "ID_DEVELOP_CHAIN", "${ID_DEVELOP_CHAIN}")
        buildConfigField("String", "SINA_APPKEY", "${SINA_APPKEY}")
        buildConfigField("String", "SINA_APP_SECRET", "${SINA_APP_SECRET}")
        buildConfigField("String", "SINA_APP_REDIRECT_URL", "${SINA_APP_REDIRECT_URL}")
        buildConfigField "String" , "CHANNEL" , '"PlatONNetwork"'
        renderscriptTargetApi 19
        renderscriptSupportModeEnabled true

        ndk {
            abiFilters "armeabi-v7a"
        }
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {


        debug {
            storeFile file('../extras/debug.keystore')
        }

        releaseC {
            storeFile file("../extras/wallet.keystore")
            storePassword "123456"
            keyAlias "wallet"
            keyPassword "123456"
            v2SigningEnabled false
        }

        releaseJC {
            storeFile file("/Users/jenkins/extras/wallet.keystore")
            storePassword "123456"
            keyAlias "wallet"
            keyPassword "123456"
            v2SigningEnabled false
        }

        releaseX {
            storeFile file("../extras/wallet.keystore")
            storePassword "123456"
            keyAlias "wallet"
            keyPassword "123456"
            v2SigningEnabled false
        }

        releaseJX {
            storeFile file("/Users/jenkins/extras/wallet.keystore")
            storePassword "123456"
            keyAlias "wallet"
            keyPassword "123456"
            v2SigningEnabled false
        }
    }

    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "RELEASE_TYPE", "${releaseTypeC}")
            multiDexEnabled true
            testCoverageEnabled true  //打开覆盖率统计开关
        }

        releaseC {
            debuggable false
            signingConfig signingConfigs.releaseC
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "RELEASE_TYPE", "${releaseTypeC}")
        }

        releaseJC {
            debuggable false
            signingConfig signingConfigs.releaseJC
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "RELEASE_TYPE", "${releaseTypeC}")
        }

        releaseX {
            debuggable false
            signingConfig signingConfigs.releaseX
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "RELEASE_TYPE", "${releaseTypeX}")
        }

        releaseJX {
            debuggable false
            signingConfig signingConfigs.releaseJX
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "RELEASE_TYPE", "${releaseTypeX}")
        }

        flavorDimensions "channel"

        productFlavors {

            PlatONNetwork {
                buildConfigField "String" , "CHANNEL" , '"PlatONNetwork"'
            }

            GooglePlay {
                buildConfigField "String" , "CHANNEL" , '"GooglePlay"'
            }

        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def verName = android.defaultConfig.versionName
            def verCode = android.defaultConfig.versionCode
            def releaseTime = new Date().format("yyyyMMddHHmm")
            def gitVersion = getGitVersion();

            def type = ""
            if (variant.buildType.name == "releaseC") {
                type = "c"
            } else if (variant.buildType.name == "releaseX") {
                type = "x_unjiagu"
            } else if (variant.buildType.name == "debug") {
                type = "debug"
                // 调试若使用实时时间戳会导致apk无法找到，因此，这里固定为0
                releaseTime = "0"
                gitVersion = "";
            }
            if (variant.flavorName != "wallet") {
                type = (type + "_" + variant.flavorName)
            }

            outputFileName = "aton_android_v${verName}_${releaseTime}_${verCode}_${type}_${gitVersion}.apk";
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

def getGitVersion() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

repositories {
    maven {
        url "https://jitpack.io"
    }
}

//下面jacoco插件的配置
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.4+"
}
def coverageSourceDirs = [
        '../wallet/src/main/java']

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../wallet/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']          // 去掉不进行检查的文件
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs) //设置需要检测覆盖率的目录
//    executionData = files('../wallet/build/jacoco/testDebugUnitTest.exec')
    executionData = files('$buildDir/outputs/code-coverage/connected/coverage.ec')

    reports {
        xml.enabled = true
        html.enabled = true
    }

    doFirst {
        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }

    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':zxing')
    implementation project(':biometric')
    implementation project(':framework')
    implementation rootProject.ext.dependencies["support-gridlayout"]
    implementation rootProject.ext.dependencies["support-design"]
    implementation rootProject.ext.dependencies["support-annotations"]
    implementation rootProject.ext.dependencies["support-recyclerview-v7"]
    implementation rootProject.ext.dependencies["support-zxing"]
    implementation rootProject.ext.dependencies["support-constraint-layout"]
    implementation rootProject.ext.dependencies["support-multidex"]
    implementation rootProject.ext.dependencies["web3j-core"]
    implementation rootProject.ext.dependencies["web3j-crypto"]
    implementation rootProject.ext.dependencies["bitcoinj-core"]
    implementation rootProject.ext.dependencies["eventbus"]
    implementation rootProject.ext.dependencies["rxlifecycle"]
    implementation rootProject.ext.dependencies["rxlifecycle-android"]
    implementation(rootProject.ext.dependencies["rxbinding"]) {
        exclude group: 'com.android.support'
    }
    api(rootProject.ext.dependencies["rxbinding-appcompat-v7"]) {
        exclude group: 'com.android.support'
    }
    api(rootProject.ext.dependencies["rxbinding-recyclerview-v7"]) {
        exclude group: 'com.android.support'
    }
    implementation rootProject.ext.dependencies["rxpermissions"]
    implementation rootProject.ext.dependencies["butterknife"]
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]
    implementation rootProject.ext.dependencies["support-zxing"]
    implementation rootProject.ext.dependencies["flexbox"]
    implementation rootProject.ext.dependencies["tinypinyin"]
    implementation rootProject.ext.dependencies["immersionbar"]
    implementation rootProject.ext.dependencies["smarttablayout"]
    implementation rootProject.ext.dependencies["umeng_common"]
    implementation rootProject.ext.dependencies["umeng_analytics"]
    implementation rootProject.ext.dependencies["SmartRefreshLayout"]
    implementation rootProject.ext.dependencies["SmartRefreshHeader"]
    //引入glide
    implementation rootProject.ext.dependencies["glide"]
    annotationProcessor rootProject.ext.dependencies["glide"]
    implementation rootProject.ext.dependencies["webview-agentweb"]
    implementation rootProject.ext.dependencies["rxandroid1"]
    //单元测试用到的库
    //junit
    implementation rootProject.ext.dependencies["junit"]
    implementation rootProject.ext.dependencies["twitter-core"]
    implementation rootProject.ext.dependencies["twitter-composer"]
    implementation rootProject.ext.dependencies["walle"]
    //mockito
    testImplementation 'org.mockito:mockito-core:2.19.0'
    //powermock
    testImplementation 'org.powermock:powermock-module-junit4:1.7.4'
    testImplementation 'org.powermock:powermock-module-junit4-rule:1.7.4'
    testImplementation 'org.powermock:powermock-api-mockito2:1.7.4'
    testImplementation 'org.powermock:powermock-classloading-xstream:1.7.4'
    //robolectric
    testImplementation 'org.robolectric:robolectric:3.8'
    testImplementation 'org.robolectric:shadows-multidex:3.8'
    //    testImplementation 'org.robolectric:robolectric:3.8-SNAPSHOT'
    testImplementation 'org.robolectric:shadows-support-v4:3.0'
    //    testImplementation group: 'org.robolectric',name:'android-all',version:'8.1.0-robolectric-4611349'
    //    testImplementation 'com.squareup.okhttp3:mockwebserver:3.9.1'
}




