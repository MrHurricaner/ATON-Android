apply plugin: 'com.android.application'
apply plugin: 'realm-android'
// 注：需要配置符号表时，使用bugly插件
apply plugin: 'bugly'
bugly {
    appId = '0970ddc6bd'
    appKey = 'b947cbd1-d646-41bc-819c-4447ea7fe428'

}

//def IS_JENKINS=true

android {

    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {

        applicationId "com.juzix.wallet"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionName "${version_name}"
        versionCode Integer.parseInt(version_code)
        buildConfigField("String", "BETA_COUNT", "\"${beta_count}\"")
        buildConfigField("String", "RELEASE_TYPE", "${releaseTypeC}")
        buildConfigField("String", "UM_APPKEY", "${UM_APPKEY}")
        buildConfigField("String", "BUGLY_APPID", "${BUGLY_APPID}")
        buildConfigField("String", "URL_SERVICE_AGREEMENT", "${URL_SERVICE_AGREEMENT}")
        buildConfigField("String", "URL_SUPPORT_FEEDBACK", "${URL_SUPPORT_FEEDBACK}")
        buildConfigField("String", "URL_PLATON_NETWORK", "${URL_PLATON_NETWORK}")
        renderscriptTargetApi 19
        renderscriptSupportModeEnabled true

        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86"
        }
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {


        debug {
            storeFile file('../extras/debug.keystore')
        }

        releaseC {
            storeFile file("../extras/wallet.keystore")
            storePassword "123456"
            keyAlias "wallet"
            keyPassword "123456"

            v2SigningEnabled false
        }
        releaseX {
            storeFile file("/Users/jenkins/extras/wallet.keystore")
//            storeFile file("../extras/wallet.keystore")
            storePassword "123456"
            keyAlias "wallet"
            keyPassword "123456"

            v2SigningEnabled false
        }


    }


    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.debug
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "RELEASE_TYPE", "${releaseTypeC}")
            multiDexEnabled true
        }

        releaseC {
            debuggable false
            signingConfig signingConfigs.releaseC
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "RELEASE_TYPE", "${releaseTypeC}")
            multiDexEnabled true
        }

        releaseX {
            debuggable false
            signingConfig signingConfigs.releaseX
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "RELEASE_TYPE", "${releaseTypeX}")
            zipAlignEnabled true
            multiDexEnabled true
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def verName = android.defaultConfig.versionName
            def verCode = android.defaultConfig.versionCode
            def innerVer = beta_count
            def releaseTime = new Date().format("yyyyMMddHHmm")
            def gitVersion = getGitVersion();

            def type = ""
            if (variant.buildType.name == "releaseC") {
                type = "c"
            } else if (variant.buildType.name == "releaseX") {
                type = "x_unjiagu"
            } else if (variant.buildType.name == "debug") {
                type = "debug"
                // 调试若使用实时时间戳会导致apk无法找到，因此，这里固定为0
                releaseTime = "0"
                gitVersion = "";
            }
            if (variant.flavorName != "wallet") {
                type = (type + "_" + variant.flavorName)
            }

            outputFileName = "wallet_android_v${verName}_${innerVer}_${releaseTime}_${verCode}_${type}_${gitVersion}.apk";
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

def getGitVersion() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

repositories {
    maven {
        url "https://jitpack.io"
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':zxing')
    implementation project(':biometric')
    implementation project(':framework')
    implementation rootProject.ext.dependencies["support-gridlayout"]
    implementation rootProject.ext.dependencies["support-design"]
    implementation rootProject.ext.dependencies["support-annotations"]
    implementation rootProject.ext.dependencies["support-recyclerview-v7"]
    implementation rootProject.ext.dependencies["support-zxing"]
    implementation rootProject.ext.dependencies["support-constraint-layout"]
    implementation rootProject.ext.dependencies["support-multidex"]
    implementation rootProject.ext.dependencies["web3j-core"]
    implementation rootProject.ext.dependencies["web3j-crypto"]
    implementation rootProject.ext.dependencies["bitcoinj-core"]
    implementation rootProject.ext.dependencies["eventbus"]
    implementation rootProject.ext.dependencies["rxlifecycle"]
    implementation rootProject.ext.dependencies["rxlifecycle-android"]
    implementation(rootProject.ext.dependencies["rxbinding"]) {
        exclude group: 'com.android.support'
    }
    api(rootProject.ext.dependencies["rxbinding-appcompat-v7"]) {
        exclude group: 'com.android.support'
    }
    api(rootProject.ext.dependencies["rxbinding-recyclerview-v7"]) {
        exclude group: 'com.android.support'
    }
    implementation rootProject.ext.dependencies["rxpermissions"]
    implementation rootProject.ext.dependencies["butterknife"]
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]
    implementation rootProject.ext.dependencies["PickerView"]
    implementation rootProject.ext.dependencies["support-zxing"]
    implementation rootProject.ext.dependencies["flexbox"]
    implementation rootProject.ext.dependencies["tinypinyin"]
    implementation rootProject.ext.dependencies["immersionbar"]
    implementation rootProject.ext.dependencies["smarttablayout"]
    implementation rootProject.ext.dependencies["umeng_common"]
    implementation rootProject.ext.dependencies["umeng_analytics"]
    implementation rootProject.ext.dependencies["bugly"]
    implementation rootProject.ext.dependencies["SmartRefreshLayout"]
    implementation rootProject.ext.dependencies["SmartRefreshHeader"]
    //引入glide
    implementation rootProject.ext.dependencies["glide"]
    annotationProcessor rootProject.ext.dependencies["glide"]

    implementation rootProject.ext.dependencies["webview-agentweb"]
}
